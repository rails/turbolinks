// Generated by CoffeeScript 1.3.3
(function() {
  var anchoredLink, browserSupportsPushState, cacheCurrentPage, changePage, constrainPageCacheTo, createDocument, crossOriginLink, currentState, extractLink, extractTitleAndBody, fetchHistory, fetchReplacement, handleClick, ignoreClick, initialized, newTabClick, noTurbolink, nonHtmlLink, pageCache, recallScrollPosition, reflectNewUrl, rememberCurrentState, rememberCurrentUrl, rememberInitialPage, remoteLink, samePageLink, triggerEvent, visit;

  pageCache = [];

  currentState = null;

  initialized = false;

  visit = function(url) {
    if (browserSupportsPushState) {
      cacheCurrentPage();
      reflectNewUrl(url);
      return fetchReplacement(url);
    } else {
      return document.location.href = url;
    }
  };

  fetchReplacement = function(url) {
    var xhr;
    triggerEvent('page:fetch');
    xhr = new XMLHttpRequest;
    xhr.open('GET', url, true);
    xhr.setRequestHeader('Accept', 'text/html, application/xhtml+xml, application/xml');
    xhr.onload = function() {
      changePage.apply(null, extractTitleAndBody(xhr.responseText));
      return triggerEvent('page:load');
    };
    xhr.onabort = function() {
      return console.log('Aborted turbolink fetch!');
    };
    return xhr.send();
  };

  fetchHistory = function(state) {
    var page;
    cacheCurrentPage();
    if (page = pageCache[state.position]) {
      changePage(page.title, page.body.cloneNode(true));
      recallScrollPosition(page);
      return triggerEvent('page:restore');
    } else {
      return fetchReplacement(document.location.href);
    }
  };

  cacheCurrentPage = function() {
    rememberInitialPage();
    pageCache[currentState.position] = {
      url: document.location.href,
      body: document.body,
      title: document.title,
      positionY: window.pageYOffset,
      positionX: window.pageXOffset
    };
    return constrainPageCacheTo(10);
  };

  constrainPageCacheTo = function(limit) {
    if (currentState.position === window.history.length - 1) {
      return delete pageCache[currentState.position - limit];
    }
  };

  changePage = function(title, body) {
    document.title = title;
    document.documentElement.replaceChild(body, document.body);
    currentState = window.history.state;
    return triggerEvent('page:change');
  };

  reflectNewUrl = function(url) {
    if (url !== document.location.href) {
      return window.history.pushState({
        turbolinks: true,
        position: currentState.position + 1
      }, '', url);
    }
  };

  rememberCurrentUrl = function() {
    return window.history.replaceState({
      turbolinks: true,
      position: window.history.length - 1
    }, '', document.location.href);
  };

  rememberCurrentState = function() {
    return currentState = window.history.state;
  };

  rememberInitialPage = function() {
    if (!initialized) {
      rememberCurrentUrl();
      rememberCurrentState();
      return initialized = true;
    }
  };

  recallScrollPosition = function(page) {
    return window.scrollTo(page.positionX, page.positionY);
  };

  triggerEvent = function(name) {
    var event;
    event = document.createEvent('Events');
    event.initEvent(name, true, true);
    return document.dispatchEvent(event);
  };

  extractTitleAndBody = function(html) {
    var doc, title;
    doc = createDocument(html);
    title = doc.querySelector('title');
    return [title != null ? title.textContent : void 0, doc.body];
  };

  createDocument = (function() {
    var createDocumentUsingParser, createDocumentUsingWrite, testDoc, _ref;
    createDocumentUsingParser = function(html) {
      return (new DOMParser).parseFromString(html, 'text/html');
    };
    createDocumentUsingWrite = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.open('replace');
      doc.write(html);
      doc.close;
      return doc;
    };
    if (window.DOMParser) {
      testDoc = createDocumentUsingParser('<html><body><p>test');
    }
    if ((testDoc != null ? (_ref = testDoc.body) != null ? _ref.childNodes.length : void 0 : void 0) === 1) {
      return createDocumentUsingParser;
    } else {
      return createDocumentUsingWrite;
    }
  })();

  handleClick = function(event) {
    var link;
    link = extractLink(event);
    if (link.nodeName === 'A' && !ignoreClick(event, link)) {
      visit(link.href);
      return event.preventDefault();
    }
  };

  extractLink = function(event) {
    var link;
    link = event.target;
    while (!(link === document || link.nodeName === 'A')) {
      link = link.parentNode;
    }
    return link;
  };

  samePageLink = function(link) {
    return link.href === document.location.href;
  };

  crossOriginLink = function(link) {
    return location.protocol !== link.protocol || location.host !== link.host;
  };

  anchoredLink = function(link) {
    return ((link.hash && link.href.replace(link.hash, '')) === location.href.replace(location.hash, '')) || (link.href === location.href + '#');
  };

  nonHtmlLink = function(link) {
    return link.href.match(/\.[a-z]+(\?.*)?$/g) && !link.href.match(/\.html?(\?.*)?$/g);
  };

  remoteLink = function(link) {
    return link.getAttribute('data-remote') != null;
  };

  noTurbolink = function(link) {
    return link.getAttribute('data-no-turbolink') != null;
  };

  newTabClick = function(event) {
    return event.which > 1 || event.metaKey || event.ctrlKey;
  };

  ignoreClick = function(event, link) {
    return samePageLink(link) || crossOriginLink(link) || anchoredLink(link) || nonHtmlLink(link) || remoteLink(link) || noTurbolink(link) || newTabClick(event);
  };

  browserSupportsPushState = window.history && window.history.pushState && window.history.replaceState;

  if (browserSupportsPushState) {
    window.addEventListener('popstate', function(event) {
      var _ref;
      if ((_ref = event.state) != null ? _ref.turbolinks : void 0) {
        return fetchHistory(event.state);
      }
    });
    document.addEventListener('click', function(event) {
      return handleClick(event);
    });
  }

  this.Turbolinks = {
    visit: visit
  };

}).call(this);
